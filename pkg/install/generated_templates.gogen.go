// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 634,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\x87\x85\x5d\x88\x0d\x0b\x61\x0f\xbe\x2d\x81\x42\x0f\x6d\x0f\x2d\x3d\xf5\x32\xb5\xc6\x89\xa8\x2d\xb9\xd2\x38\x69\x70\xfc\xdf\x8b\xec\x36\x55\x4a\x7a\xb2\xec\x79\xef\x7b\x7a\xe3\x61\x80\xa9\x51\xac\x9d\xad\xcd\xe6\xca\x34\xbc\x76\x56\xd8\x0a\xf2\x71\x54\x79\x9e\xab\x05\x1e\xb6\x8c\xda\x35\x8d\xdb\x1b\xbb\x81\x09\xe8\x03\x6b\x88\x43\xe7\xdd\xce\x68\x06\xa1\x9a\xec\xbd\x27\x31\xce\xa2\x76\x1e\x75\xd3\xbf\xe9\x42\x2d\x70\x7d\xa2\xff\x0f\xf3\xf3\x86\xba\x48\x09\x2c\x11\x22\xbe\xe7\x25\x64\xcb\xdf\x20\x26\xa0\xf2\x4c\xc2\x5a\x2d\x40\x01\x84\x93\x7b\x09\x27\x5b\xf6\x7b\x13\x18\x46\x12\xe5\xac\xbb\xe7\xca\xb3\x14\x8a\x3a\xf3\xc8\x3e\x18\x67\x4b\xec\xfe\xaa\xb3\xa6\xe9\x5d\x62\xd3\x17\x63\x75\xf9\x95\xa0\x86\x21\x07\x37\x81\x93\xe1\x8c\x55\x72\xe8\xb8\xc4\x5d\x47\xaf\x3d\xcf\x32\xab\x31\x8e\xaa\x65\x21\x4d\x42\xa5\x02\x2c\xb5\x5c\x4e\x2b\xc8\xe7\x52\x0a\xf8\x88\xbf\xa5\x96\x43\x47\xd5\x4c\x9e\xa5\xd3\x7b\x19\x15\xc9\x78\x9a\x26\xfc\x4f\x76\xfc\x74\xb9\xc7\xe4\x48\x42\x8b\x03\xb5\x4d\x89\xe3\x64\xe9\xbc\xb1\x52\x23\x7b\xb2\xbf\x42\x86\xdf\x17\x7e\xf8\x11\xc6\xea\x78\x58\xfd\x49\xc2\xe3\x0e\x7e\x00\x67\xf1\xc2\x97\x38\xcf\x14\xf8\xdf\x8a\x6d\x85\x71\xcc\xce\x5b\x24\xc7\xf7\x00\x00\x00\xff\xff\x42\x71\xff\x0a\x7a\x02\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 8348,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdb\x6e\xe4\x36\xd2\xbe\xf7\x53\x14\x7a\x7e\x60\xc6\x40\x4b\x6d\xc7\x49\xfe\x85\xb2\x0e\x76\x32\x07\xc7\x3b\x99\x89\x61\xcf\xec\x22\x57\x31\x5b\xaa\x6e\x11\x4d\x91\x5a\x16\xd5\x9d\x86\x91\x77\x5f\x14\xa9\x03\xd5\x27\x0f\x72\xb7\xbe\x18\x8f\xa5\x62\xb1\xea\x63\x1d\x3e\x96\x92\x24\x39\x13\xb5\xfc\x17\x5a\x92\x46\x67\x20\xea\x9a\x66\xeb\xcb\xb3\x95\xd4\x45\x06\x6f\xb1\x56\x66\x5b\xa1\x76\x67\x15\x3a\x51\x08\x27\xb2\x33\x00\x2d\x2a\xcc\x60\xa1\x9a\x3f\x9e\x9e\x40\x2e\x20\xfd\x24\x2a\xa4\x5a\xe4\x08\x7f\xfe\xd9\xbe\xf7\x7f\x66\xf0\xf4\x34\x7e\xfb\xf4\x04\xa8\x0b\x16\xa3\x1a\x73\x56\x66\xb1\x56\x32\x17\x94\xc1\xe5\x19\x00\xa1\xc2\xdc\x19\xcb\x6f\x00\x2a\xe1\xf2\xf2\x17\x31\x47\x45\xe1\x41\xbc\x37\x4b\x3b\x2b\x1c\x2e\xb7\xe1\xa5\xdb\xd6\x98\xc1\x3d\xe6\x16\x85\xc3\x33\x00\x87\x55\xad\x84\xc3\x56\x59\xe4\x01\xff\x08\xad\x8d\x13\x4e\x1a\xdd\x2b\x07\xa8\xad\xa9\xd0\x95\xd8\x50\x2a\xcd\xac\x36\xd6\x65\x30\xb9\xba\xb8\xba\x9c\xc0\x0b\x70\xa8\x54\x24\x01\xce\x00\xe5\x56\xd4\x08\xb3\x0a\x9d\x95\x39\xb1\x73\xb5\x91\xda\xbd\x24\xe0\xc5\x69\xab\x58\x8d\x7c\xd8\xf1\x02\xa0\xc3\xc2\xbf\x32\x05\x3e\x8c\x50\xe0\x9f\x39\x3a\x91\xae\x9a\x39\x5a\x8d\x0e\xbd\x71\x86\x32\x50\x52\xb7\x2a\x18\x3a\xbb\x96\x39\xbe\xce\x73\xd3\x68\xf7\x69\xbc\x03\xc0\xda\xa8\xa6\xc2\xde\x86\xa4\xb5\x61\x29\x5d\xb2\xc2\x6d\xbf\x11\x31\x7c\x6e\xd8\xb8\x7b\x32\xe8\x4b\x78\x49\xe1\x23\x23\x92\x2a\x70\x21\x1a\xe5\x3e\x9a\x02\x33\xb8\xf8\xf6\xe2\x02\x5e\xc0\xa6\x44\x0d\x15\x5b\x83\x05\x58\x14\x45\x62\xb4\xda\x4e\x61\x83\xb0\x31\xfa\xa5\x83\x39\x82\x98\x2b\x64\x20\xf3\xb2\x32\xc5\x59\xab\xf0\x05\x7c\x2e\x25\x81\x24\x10\xe0\xaa\x7a\x41\xd0\x10\x16\xb0\x30\x16\x96\xa8\xd1\x0a\x27\xf5\x12\x1e\x1e\x7e\x86\x15\x6e\x29\x85\x5b\x0d\x1f\xfe\x46\xf0\xe3\x35\x5c\xa6\x97\x17\xd3\x5e\x4b\xb7\x77\x70\x81\x40\x58\x8c\xed\x20\xc3\xa6\x68\xc4\x02\x04\x10\xd6\x82\xa3\xa9\x05\x0a\x36\xd8\xab\xc9\x85\x86\x8d\x95\x8e\x0d\x4d\x0f\xe3\xb7\x44\xdd\x83\x81\x55\xed\xb6\x6f\xa5\x8d\x41\xac\xb0\x90\x4d\x95\xc1\x47\xac\x8c\xdd\xc6\x7e\x22\x2c\x8c\x52\x66\xc3\x1e\xb5\x5b\x4b\xf2\xae\x36\xc4\xcf\x04\xe4\x0d\x39\x53\x49\x46\x60\xa5\xcd\x46\xff\x5e\x1a\x72\xd4\xab\x58\x48\x85\x53\xd8\x94\x32\x2f\x61\x6b\x1a\xd8\x48\xa5\x82\x53\xce\x40\x61\x38\x41\xf9\x31\x2f\xe2\xff\x58\x30\x1b\xcd\x66\xf7\x0a\x2c\xd6\x06\xac\x70\x25\x5a\x70\xa5\xd0\xed\xc6\x4b\xe9\xca\x66\x0e\x86\x1f\x22\x28\xb9\xc2\x14\x7e\x33\xcd\x4b\xa5\x40\x28\x32\xdd\x16\x63\xb0\x41\x3a\x90\xda\x19\xbf\x26\x37\xda\x09\xa9\xd1\x4e\x61\x8e\xca\x6c\x52\x78\xc0\x01\xd5\xd2\xb9\x9a\xb2\xd9\xac\x30\x39\xa5\x1c\x58\x79\xc1\x61\x8d\x7a\xc6\x39\x4b\x6e\xb6\x6c\x64\x81\x34\x6b\x08\x93\xda\xca\xb5\x70\xe8\x43\x8f\x1d\x49\x4b\x57\xa9\x5e\x53\x77\x16\x44\x65\x92\x1b\xbd\x90\xcb\xfe\x15\x40\x78\xf0\x51\xd4\x59\xf4\x30\xce\xc0\x24\x5a\xf6\x57\xcf\xc5\xa7\xe6\x2c\x28\x19\xc2\xef\xd9\x33\xd9\x48\x2a\xf9\x49\x29\xd6\x08\x02\x0a\xb9\x58\xa0\xe5\x6a\xdb\x69\x68\xb3\x6a\xa8\xa8\xfe\x08\x82\xba\xf8\x10\xb8\x2a\xad\x65\x81\x1d\xec\x0b\xb9\xac\x44\x3d\x18\x22\x5d\x09\x42\x03\x6a\x67\xb7\xde\x87\xc7\x20\xf4\x38\x05\xa1\x0b\x68\x74\x6e\x2a\x2e\xf3\x7e\x7d\xf0\xf6\xa3\x3f\x4e\xa1\x8b\x5e\x0b\xea\xb5\xd7\x20\x91\xda\xf3\xdc\x3b\x01\x86\xe1\x2f\x9c\x40\xb4\xec\xd9\x13\xf0\x95\xc0\x19\x90\x15\x17\x58\xb8\xb9\xbb\xf1\x45\x00\x5e\xb1\x5b\x24\x97\x5a\xea\x61\x73\x76\x6e\x8d\x56\x2e\x64\xee\x2b\x3d\xd4\x8d\xad\x0d\x21\x9d\x7f\x05\x90\xbd\x96\x50\x3e\x02\x8a\x0c\x10\xef\xf7\x15\xc0\x81\xb0\xcb\x21\x4d\x8f\x20\xb6\xac\x97\x5c\x3f\x28\x82\x66\x5c\x82\x5f\x1c\x29\xc2\xfb\xeb\x0e\x14\xe1\x0e\xce\xa7\xa7\xc4\x37\xea\x37\x1e\xe4\xf7\x52\xe1\x1b\xa3\x1d\xdb\xed\x1b\xf6\xd7\x21\xde\x41\x23\xda\x13\x6d\x6c\xc0\x94\x81\x67\x9b\x8a\x91\xa6\x61\x7d\xe8\xc7\x05\x1b\xc0\x28\x25\x6d\xb2\x25\x5c\xb8\x80\xf1\x63\xac\x94\xd4\x03\xe0\xa6\xf6\x8a\x25\x75\x7b\x16\x29\xdc\xf6\xe6\xbf\xa6\x37\x5d\x44\xb1\x08\xa1\x63\xeb\x9c\x6d\x70\x3a\x3a\xb6\xb1\x95\xdc\x4c\x88\x9a\x2a\xf8\xc2\x9d\x07\x7a\x35\x53\x30\x5c\xfd\x36\x92\xd0\x17\xb0\x5e\xb4\xd7\xd5\x2d\x79\xf0\xe7\x90\x1e\x84\x35\xb6\xab\x87\x35\x89\xe3\x7c\x94\x1a\x07\x12\x63\x27\x2d\x46\xe2\xbc\x17\x53\xa7\xa4\x57\xdd\xee\xfe\x4a\x1b\x77\xc0\x84\xf3\xaf\xb3\xe1\x2b\xfa\xfd\x57\x98\xd1\x72\xba\xb3\xde\xaf\x50\xf7\xf7\xd8\x46\xc4\x47\xda\x38\xb1\xe8\xbb\xb2\x36\x30\xc9\x42\xdd\x9f\x80\xac\xc4\x12\xa9\x8f\xab\x14\xde\x4b\x5d\xf8\xd8\xa9\xb8\x89\x59\xcc\x87\x1a\x19\x1a\x98\x42\x41\xc8\xad\xca\x2f\xe5\x94\x67\x3a\x0b\xc2\xf5\x5d\xa6\x6c\xe6\x69\x61\xf2\x15\xda\x34\x37\xd5\xcc\xce\x42\xc7\xf1\xbf\x66\x4e\xf4\x89\xda\x55\x0d\xa6\xa5\x4c\x59\x79\x57\x27\x96\xc0\x96\xa6\xbd\x8c\xdf\x26\x83\x56\xa1\x34\xb1\xb6\xec\x32\xbd\xfc\xff\xf4\x72\x2c\x7b\xd7\x28\x75\x67\x94\xcc\xb7\x19\xdc\x2e\x3e\x19\x77\x67\x91\x62\x2f\x2c\x92\x69\x6c\x8e\x14\x1f\x85\xc5\xff\x34\x48\x6e\xf4\x0c\x20\xaf\x9b\x0c\xbe\xbb\xa8\x46\x0f\x2b\x4f\x2c\x32\xf8\xfe\xdb\x8f\x72\x60\xb3\xc6\xc6\x8b\x93\xe1\x64\xee\x3c\xb3\xbd\xba\xb8\x62\x9e\x26\xf5\xc2\xd8\xca\xa7\x89\x50\xbd\xb4\x92\x6b\xd4\x48\x74\x67\xcd\x1c\x63\x0b\x18\xd2\x9b\x71\xcc\x84\xad\x82\xc2\xf1\x63\xe1\xca\x0c\x66\xa2\x96\x01\xe9\xf5\xf7\x33\x59\xa0\x76\xd2\x6d\xd3\xba\x99\x47\xb2\x52\x4b\x27\x85\x7a\x8b\x4a\x6c\x1f\xb8\x1b\x14\x94\xc1\x77\x91\x80\x93\x15\x9a\xc6\x1d\x78\xc7\x94\x4e\xfe\x6f\x98\x1a\xb5\x88\xd1\xc1\x1c\x26\xe3\x10\x48\xd5\x5d\xb0\x0c\x5d\xee\x2d\x2b\x66\x44\x65\xa8\x49\xfe\x82\x04\xca\xb4\xdd\x6d\xc9\x47\x06\x52\x87\x98\x7b\x49\x61\x0d\x51\x39\xdb\xc9\xfa\x80\xd9\xaf\x5a\x6d\x33\x5f\x38\x59\x1b\x33\x6e\xdf\x0f\xe7\x2d\x8d\xe0\x94\xaa\xd1\x2e\x8c\xcd\x91\x95\x06\x8a\xcd\x0c\xfb\x98\xe1\x31\x0b\x1e\xdb\xbe\x16\xb6\xb5\x3d\x88\xfd\x35\xf3\xa3\x1c\xbd\xd5\xb9\x6a\x7c\x9f\xe6\x8b\x42\xa0\x53\x5d\x0f\x0f\x4c\xf4\x19\xe2\xdc\x51\xe7\x1f\x78\xe9\x0e\xa9\x1d\xda\x57\x81\xb9\x12\x96\x2f\x08\x73\xb3\x8e\x0a\xc0\x09\xd2\x19\x9a\x71\xec\xbc\x35\xc6\xcd\x52\xa2\xf2\xa8\x03\x42\x8f\x76\x9d\x0c\x84\x68\x12\x76\x9e\x76\x22\x91\x06\xd4\x6b\x69\x8d\xf6\xf4\x23\x30\xbb\xc9\x87\x2f\x3f\xbd\x7b\xf3\xeb\xa7\xf7\xb7\x37\x93\x40\x38\xa6\x8c\x87\x59\xa3\xb5\x63\x76\x18\xa9\xf1\xed\x7d\xbe\x0d\xdc\xcd\xa9\x43\x3e\xee\xd1\xba\x7d\x1f\x87\xe0\x64\xe1\xa3\x8e\x32\x8d\xe0\xfb\x71\xb7\x1b\x97\xe8\x88\xf8\xb6\xd6\xf9\x33\x89\x54\xec\xd2\xe7\xf8\xd0\x3d\x77\xee\x2e\x7a\x42\x83\x50\x0e\xad\xe6\x8b\xdc\x9e\xc5\x0b\x6b\xaa\x9e\xbd\x54\xdc\xf6\x05\x71\xb8\xb5\x1c\x8e\x61\x50\x26\x5f\xd1\xfe\x61\xa3\x5e\x67\x07\x70\x19\xe0\x1e\xe1\xb2\x16\xaa\xc1\x3d\x4c\x9e\x0b\xe2\xdd\x18\xe8\x18\xde\x89\x08\x60\x82\x39\x26\x96\x27\xa8\xe5\x91\xb8\x64\xa9\xc0\xa5\x47\x72\xe3\xfa\x30\x18\xdd\x4e\x7c\xf6\x89\xe4\x40\x08\xfa\xcb\x20\x45\x01\xd7\xb9\x15\xce\x80\x1d\x3a\x70\x4f\xdc\xab\x2b\x87\x18\xcb\xb1\xb8\x63\xb1\xc8\xcc\x5d\x52\x72\xac\x68\x6c\x84\xf6\xfc\x91\x9a\xba\x56\x5b\xf8\xf9\xf3\xe7\x3b\x98\x0b\x92\x39\x88\xc6\x95\x4c\x5e\x7d\x13\x10\x2a\x10\x92\xe1\xe2\xcc\x0a\xd7\x52\x78\x0f\x1e\x6f\x6e\x3f\xff\xfe\xfa\xcb\xe7\x9f\xbf\x3c\xbc\xbb\x7f\xf4\x27\xd5\x3f\xfa\xf0\xee\xb7\xc7\x51\xae\xae\x85\x95\x62\xae\x90\xba\x9b\x64\xa4\x90\x46\xfc\xb2\x0d\xbd\xf7\xd6\x54\xe3\xf0\x0b\x62\xf7\xb8\xc8\x46\x87\x36\x62\x8f\x5c\x93\xd9\x85\x01\x00\x0e\x97\x6c\x84\x47\x80\x20\x0c\x73\xb0\x60\x12\x91\x8b\xbc\x64\xae\xae\x47\x69\xd9\xdf\x3f\x19\x29\xd6\x3e\x8d\xb4\x18\xdb\x5e\x30\xa3\x05\xed\x30\xca\x2f\x9c\xfa\x4d\x72\xa1\x3b\x8c\x5d\x89\x14\x87\xf1\x70\xe9\x70\x1b\xc3\x56\x36\x8c\x93\x2f\x16\x7e\xe4\xe6\xcf\x17\x4a\xb3\xf1\x83\x22\xa3\x35\xe6\xfe\xc8\xa4\x1b\x87\x7d\x92\xf4\x0e\xf8\x29\x01\x6f\x7e\xdd\x3f\x4a\xdb\xdb\x51\x4a\xeb\x3c\xcd\x55\x43\x0e\x6d\xca\xbd\x47\xc5\x90\x7c\xa1\x50\x26\x07\x28\xde\x04\xd1\xdb\xbb\x91\x53\x5c\x31\x09\x9d\x1f\x44\x8d\x93\x72\xb0\xa1\x93\xe7\xe8\x72\x96\x25\xfd\x68\x28\x8a\xf2\xd8\xe2\x56\xfa\xfa\x6c\x44\x90\x25\x41\xd5\x90\x1f\x95\x79\xf4\x24\x16\xa1\x12\xcc\x7d\x4f\xf6\xf4\xd4\x4f\xc8\x5e\x75\x63\xa7\xf3\xdd\x34\xec\xba\xd7\xd4\x07\x70\x34\x28\x1b\x19\xc2\x7d\x2c\xf4\xe6\xa4\x90\xf6\x7a\xaf\x63\xc7\x66\xdd\x47\xe4\x78\x38\xbc\x2f\xf7\xbf\x84\x49\x9e\xd0\xcb\xf0\xee\x46\x3a\x3f\x5d\x22\xe9\x8c\xdd\xf6\x9d\xe6\x3d\x93\xfa\x48\xdd\xa9\x9c\xe3\xb0\x89\x7c\x6f\x53\xe6\x60\x3a\xc5\xb9\xd0\xd1\xfe\xff\x7b\x15\x67\xe6\x79\x36\xfc\xfd\xe1\xdd\x6f\xe7\xff\x08\x33\x2e\x7f\x23\x68\x08\xed\x6c\x30\x36\x8d\x13\xbd\xbb\xe7\xdd\x48\xc7\x4e\x46\x95\x8e\x91\xe3\x44\x6b\xac\xba\x7e\x7a\x3a\x24\xe1\x2b\x91\x22\x84\x51\x7d\x8c\xd7\x2d\xa5\x8b\x0c\xc9\xa2\xab\x44\xb2\x44\x97\x90\x13\xd6\xf5\x57\xd1\x51\x69\xdb\xb5\x62\x6e\x85\xce\xcb\xce\x90\x9f\xfc\x5f\xbb\xb6\xb4\x7e\x70\xf9\xa4\x43\x3a\x98\x06\xb3\x86\x07\x1f\xb1\xf4\x4f\x23\x75\xb4\x60\x32\x9d\x3c\xef\xdc\xa9\x32\x6b\x91\x53\x21\x0f\x03\x93\x4a\x68\xb9\xe0\x0b\x0e\x67\x35\xc9\x02\x6d\x08\x90\x9d\x6b\xa2\x6f\x13\x86\x10\x1a\x5d\xa0\xdd\x89\x3a\x8b\x4a\x38\xb9\x46\xcf\xdf\xa9\xcb\x89\xe5\x28\xf2\x0e\x00\xef\xdd\xa4\x66\x5e\x48\x7b\x39\x0d\xbf\xbf\x39\x05\x71\x04\x9d\xff\x20\x71\x08\x3a\x3f\xe5\xef\xd0\xdf\x93\x3a\xad\xf4\x0b\xa1\x3d\x18\x58\x84\xb6\x8f\xac\x1d\x99\xd3\x1a\xdf\x55\x42\x1e\x34\x13\xf9\x45\xa7\x73\x4f\xea\xb9\xce\x89\x5c\x20\x37\x86\x0f\x05\xb5\x9f\xde\x33\xd6\x4c\xa1\xa4\xdb\x99\xbf\xc5\x78\xb7\x64\xa4\xa5\x1a\xd7\x27\xb8\x47\xb7\xa2\xd5\xc5\xab\xae\xff\xbe\xc2\x2d\xc8\xe2\xc7\x53\xbc\x32\xb2\x86\x97\x0a\xd7\x58\x1c\x0d\xff\x0e\xec\xe1\x5f\x6f\x93\x5e\x9e\x46\xc5\xb7\xeb\x3d\x20\x1d\x94\x82\x3c\x27\x32\x5a\x6d\x41\xe4\x39\x52\xe8\x4f\x25\x86\xf9\xf9\xab\x6e\x54\xfb\xb8\x10\x8a\xf0\xf1\xfc\x2c\x3a\x8a\xfb\x96\x4c\x1d\x3a\x8d\x4e\xe9\xd9\xe9\x42\x31\x16\x3b\x70\x3e\xe4\x6c\x93\xbb\x60\xef\xc6\xcf\x55\x98\x6b\x37\x0e\x68\xab\x73\x98\x1b\xb3\x5a\x21\xd6\x9c\x31\xbd\xa9\x93\xa5\x74\x93\x29\x54\x28\x18\x68\x2e\xcf\x20\xfc\xb0\xa3\x4d\xa2\xa6\x26\x67\x51\x54\x7d\x36\x9d\xef\x18\xc6\xaa\xb9\x3e\x39\xe4\x22\x76\x3c\x5e\x34\xfe\xe1\xba\xa0\x89\xfa\xb7\xd0\x30\xe9\xf6\x98\x74\xdd\x35\x52\xf2\x0a\xd3\x65\x3a\x85\x7f\x23\x53\xfc\x37\xca\x34\xc5\x79\xea\x67\x8b\xce\xac\x30\x8c\x07\x85\x75\x32\x6f\x94\xb0\xdd\x61\xb4\x5a\x76\x89\x41\xbb\xeb\xf5\x86\xb8\x2b\xe4\xac\x2b\xdd\xb0\xde\x74\x63\xec\x8a\xfa\x5b\xff\xce\x32\xbf\xd1\xb5\x98\xe7\x97\xdf\x5c\xed\xff\x1b\x3b\xfc\x2e\x44\x5f\x57\xd1\xfa\xef\x54\x46\x9f\x08\x8d\x8f\xad\xf4\xcd\x20\xbc\x13\x21\x9d\xbe\x64\xd0\x77\xed\x09\xf9\xf1\x68\x39\xb4\xc4\x6f\x7c\x24\x74\x1e\xd0\xae\x0f\x7c\xc1\xe4\x9b\xd9\xc0\xe7\x38\x47\x7f\x88\x89\x85\x58\x71\x53\x0e\x51\x46\xe8\xa2\xcf\xa2\x2f\xa3\x2f\xab\xd1\x27\x52\x3e\x1c\x3f\xb1\xf7\xb7\xa3\x74\xe4\xa5\x92\xe4\x50\x27\xad\x09\xd7\xd9\xd5\xc5\xd5\x65\x07\x92\x9f\x6e\xde\xe3\x52\x92\xb3\xdb\x87\x5c\x68\x1f\xab\x3b\x30\xd9\xf6\x7d\x42\xad\x40\xec\xf1\x3e\x4a\xa7\xe5\x03\x42\xed\x45\xe7\x75\x51\xc8\x30\x18\x63\xd6\xf2\x9a\x2f\x5c\x23\x5d\xc3\xfb\x81\xb8\x8e\x6a\xa9\xf5\x6c\xe8\x19\x3d\x89\xff\x50\x7e\xa4\x0c\x0f\xdf\xcc\xbb\x4d\x7f\xad\xdb\x2d\xdf\x7e\x7a\xe8\x58\x28\x4d\xfb\x81\x77\xcb\x49\x41\x17\xc6\x51\x37\x4c\xaf\xc4\xd6\x0f\x19\xd5\x7a\x98\x90\x6b\x52\xc6\xac\x9a\x1a\x24\x51\x83\x04\x46\x03\x99\x0a\xe1\x43\xff\xa1\x99\xb5\x37\x35\x0d\xdf\x2d\x0a\x4d\xdd\x1c\x73\xf2\xc9\x68\x9c\xc4\x6f\xc2\xad\x30\xfe\x72\x11\x36\xa7\xf1\xc7\x8c\xee\x76\xe7\xed\x1b\xbd\xe9\xef\xce\x93\xcb\xc9\xd9\x7f\x03\x00\x00\xff\xff\x08\xa2\xe8\xfb\x9c\x20\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 931,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcb\x6e\x9c\x40\x10\xbc\xf3\x15\x25\xed\x35\xe0\x60\xc9\x17\x6e\x51\x9c\x44\x96\x12\x6b\xa5\xc8\xb9\xf7\x0e\x0d\x1e\x79\x5e\x99\xe9\xd9\x2c\x41\xfe\xf7\x08\xf6\x05\xb1\xfb\x04\x54\x55\x57\x75\xcf\x50\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x35\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\x9b\x7d\x5d\xbc\x68\xd7\x36\xb8\xbf\xb4\x2d\xce\xf4\xa6\x00\x1c\x59\x6e\xae\xee\xe3\x08\xdd\xa1\x7a\x24\xcb\x29\x90\x62\xbc\xbe\x9e\x48\xf3\x6b\x83\x71\x5c\xa3\xe3\x08\x76\xed\x44\x4b\x81\xd5\xd4\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\xef\xb4\x63\x93\x8e\x1f\xde\x04\x28\x00\x61\x1b\x0c\x09\x9f\x24\x8b\xb0\x53\x99\x95\xfa\x3d\x3d\x70\x8e\x32\xe3\xbe\xe5\x9f\xab\x10\x53\xed\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x8d\x4f\x0d\x8c\x76\xf9\x70\x22\x5d\x96\x7c\x31\x2b\xdf\x35\x9b\x6a\x3e\x86\x05\xd0\xd4\xd5\x5d\x75\xfb\x71\x8d\x6f\xb3\x31\x5b\x6f\xb4\x1a\x1a\x3c\x74\x8f\x5e\xb6\x91\xd3\x74\x1e\x67\x16\xc5\x7e\x31\x58\x89\xd2\xe2\xae\xbe\x05\xb0\xc1\x0f\x3a\x68\x9b\xed\xe4\xe0\xe3\x30\xdd\x85\x9c\xf8\x03\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x0a\x1f\x70\x67\xb1\x12\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5b\xd7\xd8\xe0\x9e\x3b\xca\x46\x10\x7c\xbc\xe6\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\xf3\xed\x14\x8f\x9e\x05\xc6\xf7\x09\xbe\x03\x93\x7a\x46\xe4\xdf\x99\x93\x80\x5c\x8b\xc8\x29\x78\x97\xb8\xba\x34\x9a\xba\xae\x26\x3c\xee\x53\x19\xcd\x4e\xae\x03\x2c\x76\xbf\xf5\x51\x9a\x63\xba\x0b\x9c\x58\xe5\xa8\x65\xf8\xec\x9d\xf0\x41\x9a\x85\x2e\x66\xf7\x29\x3d\x25\x8e\xff\x6b\x4e\xd0\xb7\xe8\x73\x78\x8b\x91\x31\xfe\xcf\x36\xea\xbd\x36\xdc\xf3\x97\xa4\xc8\x90\xcc\xff\x50\x47\x26\x71\xf1\x2f\x00\x00\xff\xff\x68\x3b\xcf\xad\xa3\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
